/* Autogenerated with kurento-module-creator */

#include <gst/gst.h>
#include "MediaPipeline.hpp"
#include <CNVpipelineImplFactory.hpp>
#include "CNVpipelineImpl.hpp"
#include <jsonrpc/JsonSerializer.hpp>
#include <KurentoException.hpp>
#include "MediaPipelineImpl.hpp"

#define GST_CAT_DEFAULT kurento_cnvpipeline_impl
GST_DEBUG_CATEGORY_STATIC (GST_CAT_DEFAULT);
#define GST_DEFAULT_NAME "KurentoCNVpipelineImpl"

namespace kurento
{
namespace module
{
namespace cnvpipeline
{

CNVpipelineImpl::CNVpipelineImpl (const boost::property_tree::ptree &config, std::shared_ptr<MediaPipeline> mediaPipeline) : OpenCVFilterImpl (config, std::dynamic_pointer_cast<MediaPipelineImpl> (mediaPipeline)){
}

MediaObjectImpl *
CNVpipelineImplFactory::createObject (const boost::property_tree::ptree &config, std::shared_ptr<MediaPipeline> mediaPipeline) const
{
  return new CNVpipelineImpl (config, mediaPipeline);
}

CNVpipelineImpl::StaticConstructor CNVpipelineImpl::staticConstructor;

CNVpipelineImpl::StaticConstructor::StaticConstructor()
{
  GST_DEBUG_CATEGORY_INIT (GST_CAT_DEFAULT, GST_DEFAULT_NAME, 0,
                           GST_DEFAULT_NAME);
}


void CNVpipelineImpl::connectServer(const std::string &server){
	CNVpipelineOpenCVImpl::connectServer(server);
}
void CNVpipelineImpl::disconnectServer(){
	CNVpipelineOpenCVImpl::disconnectServer();
}
void CNVpipelineImpl::addProperty(const std::string &name, const std::string &value){
	CNVpipelineOpenCVImpl::addProperty(name, value);
}
void CNVpipelineImpl::setId(const std::string &id){
	CNVpipelineOpenCVImpl::setId(id);
}
void CNVpipelineImpl::setToken(const std::string &token){
	CNVpipelineOpenCVImpl::setToken(token);
}

} /* cnvpipeline */
} /* module */
} /* kurento */
