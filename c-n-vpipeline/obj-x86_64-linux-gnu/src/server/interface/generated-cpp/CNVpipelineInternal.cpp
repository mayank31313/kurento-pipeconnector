/* Autogenerated with kurento-module-creator */

#include <iostream>
#include "CNVpipelineInternal.hpp"
#include <KurentoException.hpp>
#include <jsonrpc/JsonSerializer.hpp>
#include "MediaPipeline.hpp"

namespace kurento
{
namespace module
{
namespace cnvpipeline
{

void CNVpipelineMethodConnectServer::invoke (std::shared_ptr<CNVpipeline> obj)
{
  if (!obj) {
    throw KurentoException (MEDIA_OBJECT_NOT_FOUND, "Invalid object while invoking method CNVpipeline::connectServer");
  }

  return obj->connectServer (server);
}

void CNVpipelineMethodConnectServer::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
    s.SerializeNVP (server);

  } else {
    if (s.JsonValue.isNull ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' is required");
    } else if (!s.JsonValue.isObject ()){
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' should be an object");
    }

    if (!s.JsonValue.isMember ("server") || !s.JsonValue["server"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'server' parameter should be a string");
    }

    s.SerializeNVP (server);

  }
}

void CNVpipelineMethodDisconnectServer::invoke (std::shared_ptr<CNVpipeline> obj)
{
  if (!obj) {
    throw KurentoException (MEDIA_OBJECT_NOT_FOUND, "Invalid object while invoking method CNVpipeline::disconnectServer");
  }

  return obj->disconnectServer ();
}

void CNVpipelineMethodDisconnectServer::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
  } else {
    if (!s.JsonValue.isNull () && !s.JsonValue.isObject ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' should be an object");
    }

  }
}

void CNVpipelineMethodAddProperty::invoke (std::shared_ptr<CNVpipeline> obj)
{
  if (!obj) {
    throw KurentoException (MEDIA_OBJECT_NOT_FOUND, "Invalid object while invoking method CNVpipeline::addProperty");
  }

  return obj->addProperty (name, value);
}

void CNVpipelineMethodAddProperty::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
    s.SerializeNVP (name);

    s.SerializeNVP (value);

  } else {
    if (s.JsonValue.isNull ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' is required");
    } else if (!s.JsonValue.isObject ()){
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' should be an object");
    }

    if (!s.JsonValue.isMember ("name") || !s.JsonValue["name"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'name' parameter should be a string");
    }

    s.SerializeNVP (name);

    if (!s.JsonValue.isMember ("value") || !s.JsonValue["value"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'value' parameter should be a string");
    }

    s.SerializeNVP (value);

  }
}

void CNVpipelineMethodSetId::invoke (std::shared_ptr<CNVpipeline> obj)
{
  if (!obj) {
    throw KurentoException (MEDIA_OBJECT_NOT_FOUND, "Invalid object while invoking method CNVpipeline::setId");
  }

  return obj->setId (id);
}

void CNVpipelineMethodSetId::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
    s.SerializeNVP (id);

  } else {
    if (s.JsonValue.isNull ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' is required");
    } else if (!s.JsonValue.isObject ()){
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' should be an object");
    }

    if (!s.JsonValue.isMember ("id") || !s.JsonValue["id"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'id' parameter should be a string");
    }

    s.SerializeNVP (id);

  }
}

std::shared_ptr<MediaPipeline> CNVpipelineConstructor::getMediaPipeline ()
{
  return mediaPipeline;
}

void CNVpipelineConstructor::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
    s.SerializeNVP (mediaPipeline);

  } else {
    if (s.JsonValue.isNull ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'constructorParams' is required");
    } else if (!s.JsonValue.isObject ()){
      throw KurentoException (MARSHALL_ERROR,
                              "'constructorParams' should be an object");
    }

    if (!s.JsonValue.isMember ("mediaPipeline") || !s.JsonValue["mediaPipeline"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'mediaPipeline' parameter should be a string");
    }

    s.SerializeNVP (mediaPipeline);

  }
}

} /* cnvpipeline */
} /* module */
} /* kurento */
